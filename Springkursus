Noter til spring boot kursus


Sourcekode til kursus: github.com/cfaddict/spring-boot-intro

referenceguide til springboot:
http://docs.spring.io/spring-boot/docs/current/ref...
Her kan man feks finde starter poms

Spring boot api:
http://docs.spring.io/spring-boot/docs/current/api...

Spring Io platform:
http://spring.io/projects

Getting started guides:
http://spring.io/guides

I intelliJ kan man vælge spring initializer ved opstart af et nyt projekt. 
Derunder kan man vælge forskellige facetter af det projekt man vil oprette.
Bla build tool.

Når man har valgt maven kan man afvikle sine apps med:
mvn spring-boot:run (kald maven med pluginnavnet spring-boot, hvis run metode kaldes)

spring loaded og jrebel til hotwśwap af kode.

IntelliJ - build/execution/deployment - compiler - flueben i 'make project autolmatically'

Spring boot devtools - genbygger jævnligt. Chrome plugin reloader ved ændringer. 

Rabat på støtre spring boot kursus: 
https://www.udemy.com/spring-boot-intro/?couponCode=1NINETEEN9 

IOC container 


Bean scope:
Singleton
prototype
request
session
globalsession -
@Scope("session")

Annotationer:
@Autowired - kan bruges på en variabel (anbefales ikke), settermetode eller constructor (begge ok)
@Restcontroller - bruges på klassen der er restcontroller
@RequestMapping("/endpoint1") - får spring boot til at forstå at dette er et endpoint for http://localhost:8080/endpoint1
@SpringBootApplication - bruges der hvor main metoden findes.
@ComponentScan("package.hej.hej","package.hej.hej1") - denne finder komponeter som indgår i Applikationscontexten. 
Denne kan findes når man starter appen: ApplicationContext ctx = SpringApplication.run(..... 
@ComponentScan finder kun elementer der er markeret som komponetner - dvs feks markeret med @Service, @Component, @Bean osv...

Security:
Når man skriver dependencyen <dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
			<scope>test</scope>
		</dependency> ind i et springboot project - så kommer der automatisk sikkerhhed på. man skal logge ind. '
    Default password genereres og kan ses i consollen - user er "user"
Username og password kan lægges i propertyfilen som flg: security.user.name=ælaskdfjæasldkfj, security.user.password=asldkjf, 
security.user.role=user, På denne måde kan man autorisere - men der er stadig ingen authentication. Altså genkendelse af enkelte brugere.
Hele applikationen er lukket med et brugernavn der har en rolle - ikke så brugbart endnu. 

Sikkerhedsconfiguration:
Man laver en klasse som man annoterer med @Configuration, og der enabler man sikkerhed på metodeniveau med 
@EnableGlobalMethodSecurity(securedEnabled=true)

Custom configuration af sikkerhed:
@Configuration
@EnableGlobalMethodSecurity(sećuredEnabled=true)
public class SecurityConfig extends WebSecurityConfigurerAdapter {
}


public class KlasseMedMetoderDerSkalSikres{


@Secured("ROLE_ADMIN")
@Requestmapping("/list")
String metodeDerSkalSikres(){}
}

Eksempel på restsikkerhed vistnok i springboot:
https://octoperf.com/blog/2018/03/08/securing-rest-api-spring-security/

